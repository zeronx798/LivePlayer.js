# Workflow Name
name: Sync Code and Tags to GitHub

# Trigger: Run when there is a new push to any branch
on:
  push:
    branches:
      - '**'

jobs:
  sync-code-and-tags:
    runs-on: linux-amd64 # The tag for your self-hosted Runner
    steps:
      # Step 1: Debug - Print key Gitea variables (unchanged)
      - name: Debug Gitea Context Variables
        run: |
          echo "Gitea Repository: ${{ gitea.repository }}"
          echo "Gitea SHA: ${{ gitea.sha }}"

      # Step 2: Configure Git Authentication (unchanged)
      - name: Configure Git for checkout
        run: |
          GITEA_SERVER_URL="${{ gitea.server_url }}"
          AUTH_HEADER="Authorization: basic $(echo -n "gitea-actions:${{ secrets.GITEA_TOKEN }}" | base64)"
          git config --global "http.${GITEA_SERVER_URL}.extraheader" "${AUTH_HEADER}"
          git config --global --add safe.directory "${{ gitea.workspace }}"
      
      # Step 3: Checkout Code (unchanged)
      # This step still only clones a single branch, but we will fetch all information in the next step
      - name: Checkout repository
        run: |
          git clone --branch ${{ gitea.ref_name }} "${{ gitea.server_url }}/${{ gitea.repository }}.git" .

      # New Step 4: Fetch all branches and all tags (core fix)
      # This is key to solving the tag issue. We tell Git to pull everything from origin (i.e., Gitea).
      - name: Fetch all branches and tags from origin (Gitea)
        run: |
          echo "Fetching all remote branches..."
          # The +refs/heads/*:refs/remotes/origin/* refspec maps all remote branches
          git fetch origin "+refs/heads/*:refs/remotes/origin/*"
          
          echo "Fetching all remote tags..."
          # The --tags option forces fetching all tags
          git fetch origin --tags

      # Step 5: Clean up Git credentials (now step 5)
      - name: Clean up Git credentials
        if: always()
        run: |
          git config --global --unset-all "http.${{ gitea.server_url }}.extraheader"

      # Step 6: Mirror push to GitHub (corrected)
      - name: Push to GitHub Mirror
        env:
          # Pass secrets as environment variables to avoid exposing them in the command line
          G_GITHUB_USERNAME: ${{ secrets.G_GITHUB_USERNAME }}
          G_GITHUB_TOKEN: ${{ secrets.G_GITHUB_TOKEN }}
          G_GITHUB_REPO: ${{ secrets.G_GITHUB_REPO }}
        run: |
          echo "Setting up remote 'github'..."

          git remote add github "https://${G_GITHUB_USERNAME}:${G_GITHUB_TOKEN}@github.com/${G_GITHUB_REPO}"
          
          git push --mirror --prune github
          
          echo "Synchronization complete."