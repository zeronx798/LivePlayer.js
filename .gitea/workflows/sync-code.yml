# 工作流名称
name: Sync Code and Tags to GitHub

# 触发器：当任何分支有新的推送时运行
on:
  push:
    branches:
      - '**'

jobs:
  sync-code-and-tags:
    runs-on: linux-amd64 # 您自托管 Runner 的标签
    steps:
      # 步骤 1: 调试 - 打印关键的 Gitea 变量 (保持不变)
      - name: Debug Gitea Context Variables
        run: |
          echo "Gitea Repository: ${{ gitea.repository }}"
          echo "Gitea SHA: ${{ gitea.sha }}"

      # 步骤 2: 配置 Git 认证 (保持不变)
      - name: Configure Git for checkout
        run: |
          GITEA_SERVER_URL="${{ gitea.server_url }}"
          AUTH_HEADER="Authorization: basic $(echo -n "gitea-actions:${{ secrets.GITEA_TOKEN }}" | base64)"
          git config --global "http.${GITEA_SERVER_URL}.extraheader" "${AUTH_HEADER}"
          git config --global --add safe.directory "${{ gitea.workspace }}"
      
      # 步骤 3: 检出代码 (保持不变)
      # 这一步仍然只克隆了单个分支，但我们会在下一步中补全信息
      - name: Checkout repository
        run: |
          git clone --branch ${{ gitea.ref_name }} "${{ gitea.server_url }}/${{ gitea.repository }}.git" .

      # 新增步骤 4: 获取所有分支和所有标签 (核心修正)
      # 这是解决标签问题的关键。我们告诉 Git 从 origin (即 Gitea) 拉取所有东西。
      - name: Fetch all branches and tags from origin (Gitea)
        run: |
          echo "Fetching all remote branches..."
          # +refs/heads/*:refs/remotes/origin/* 这个 refspec 映射了所有远程分支
          git fetch origin "+refs/heads/*:refs/remotes/origin/*"
          
          echo "Fetching all remote tags..."
          # --tags 选项强制获取所有标签
          git fetch origin --tags

      # 步骤 5: 清理认证信息 (现在是第5步)
      - name: Clean up Git credentials
        if: always()
        run: |
          git config --global --unset-all "http.${{ gitea.server_url }}.extraheader"

      # 步骤 6: 镜像推送到 GitHub (已修正)
      # 我们使用新的 G_ 前缀密钥，并移除不必要的 env 块
      - name: Push to GitHub Mirror
        env:
          # 将密钥作为环境变量传入，避免在命令行中暴露
          G_GITHUB_USERNAME: ${{ secrets.G_GITHUB_USERNAME }}
          G_GITHUB_TOKEN: ${{ secrets.G_GITHUB_TOKEN }}
          G_GITHUB_REPO: ${{ secrets.G_GITHUB_REPO }}
        run: |
          echo "Setting up remote 'github'..."

          git remote add github "https://${G_GITHUB_USERNAME}:${G_GITHUB_TOKEN}@github.com/${G_GITHUB_REPO}"
          
          git push --mirror --prune github
          
          echo "Synchronization complete."