# 工作流名称
name: Create Dev Release on Push

# 工作流触发器：当推送到 main 分支时触发
on:
  push:
    branches:
      - main  # 进行开发构建的分支

# 定义一个名为 'build-and-release' 的任务
jobs:
  build-and-release:
    # 指定运行此任务的 Runner。确保这里的标签与注册 Runner 时使用的标签一致
    runs-on: linux-amd64 # Runner 标签
    steps:
      # ----------------------------------------------------------------------
      # 步骤 1: 调试 - 打印关键的 Gitea 变量 (可选，但推荐保留)
      # ----------------------------------------------------------------------
      - name: Debug Gitea Context Variables
        run: |
          echo "Gitea Repository: ${{ gitea.repository }}"
          echo "Gitea SHA: ${{ gitea.sha }}"

      # ----------------------------------------------------------------------
      # 步骤 2: 配置 Git 认证
      # ----------------------------------------------------------------------
      - name: Configure Git for checkout
        run: |
          GITEA_SERVER_URL="${{ gitea.server_url }}"
          AUTH_HEADER="Authorization: basic $(echo -n "gitea-actions:${{ secrets.GITEA_TOKEN }}" | base64)"
          git config --global "http.${GITEA_SERVER_URL}.extraheader" "${AUTH_HEADER}"
          git config --global --add safe.directory "${{ gitea.workspace }}"
      
      # ----------------------------------------------------------------------
      # 步骤 3: 检出代码
      # ----------------------------------------------------------------------
      - name: Checkout repository
        run: |
          git clone --depth 1 --branch ${{ gitea.ref_name }} "${{ gitea.server_url }}/${{ gitea.repository }}.git" .

      # ----------------------------------------------------------------------
      # 步骤 4: 清理认证信息 (这是一个良好的安全习惯)
      # ----------------------------------------------------------------------
      - name: Clean up Git credentials
        if: always()
        run: |
          git config --global --unset-all "http.${{ gitea.server_url }}.extraheader"

      # ----------------------------------------------------------------------
      # 步骤 5: 设置 Node.js 环境
      # ----------------------------------------------------------------------
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      # ----------------------------------------------------------------------
      # 步骤 6: 安装依赖并构建项目
      # ----------------------------------------------------------------------
      - name: Install dependencies and build
        run: |
          npm ci
          npm run build

      # ----------------------------------------------------------------------
      # 步骤 7: 准备版本信息和发布产物
      # ----------------------------------------------------------------------
      - name: Prepare release assets
        id: prepare_assets
        run: |
          SHORT_SHA=$(echo "${{ gitea.sha }}" | cut -c1-8)
          echo "SHORT_SHA=${SHORT_SHA}" >> $GITEA_ENV
          (cd dist && zip -r "../liveplayer.zip" .)

      # ----------------------------------------------------------------------
      # 新增步骤 8: 分析提交信息以确定发布类型
      # 1. 检查提交信息是否符合版本号格式 (e.g., 1.2.3, 4.5.6-rc.1, 7.8.9-SNAPSHOT)
      #    正则表达式匹配 X.Y.Z 或 X.Y.Z-suffix 格式
      # 2. 如果是版本号，设置 IS_VERSION_COMMIT=true 和发布的详细信息
      # 3. 如果不是，设置 IS_VERSION_COMMIT=false，以触发后续的开发构建流程
      # ----------------------------------------------------------------------
      - name: Analyze Commit Message for Versioning
        id: commit_analyzer
        run: |
          COMMIT_MSG=$(git log -1 --pretty=%s "${{ gitea.sha }}")
          if [[ "$COMMIT_MSG" =~ ^([0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?)$ ]]; then
            VERSION_TAG="${BASH_REMATCH[1]}"
            echo "Commit message is a version: ${VERSION_TAG}"
            echo "IS_VERSION_COMMIT=true" >> $GITEA_ENV
            echo "TAG_NAME=${VERSION_TAG}" >> $GITEA_ENV
            
            if [[ "$VERSION_TAG" == *-rc* ]]; then
              echo "Release type: Release Candidate"
              echo "RELEASE_NAME=Release Candidate ${VERSION_TAG}" >> $GITEA_ENV
              echo "PRERELEASE=true" >> $GITEA_ENV
            elif [[ "$VERSION_TAG" == *-* ]]; then
              echo "Release type: Snapshot"
              echo "RELEASE_NAME=Snapshot ${VERSION_TAG}" >> $GITEA_ENV
              echo "PRERELEASE=true" >> $GITEA_ENV
            else
              echo "Release type: Full Release"
              echo "RELEASE_NAME=Release ${VERSION_TAG}" >> $GITEA_ENV
              echo "PRERELEASE=false" >> $GITEA_ENV
            fi
          else
            echo "Commit message :$COMMIT_MSG: is not a version. Proceeding with dev build."
            echo "IS_VERSION_COMMIT=false" >> $GITEA_ENV
          fi

      # ------------------------------------------------------------------
      # 步骤 9A: 如果是版本号提交，则创建正式版、RC版或快照版 Release
      # 此步骤仅在 env.IS_VERSION_COMMIT == 'true' 时运行
      # ------------------------------------------------------------------
      - name: Create Versioned Release (if applicable)
        id: create_versioned_release
        if: env.IS_VERSION_COMMIT == 'true'
        run: |
          COMMIT_MSG_FROM_GIT=$(git log -1 --pretty=%B "${{ gitea.sha }}")
          BODY_TEXT=$(printf "Release for version **%s**.\n\nCommit details:\n> %s" "${{ env.TAG_NAME }}" "${COMMIT_MSG_FROM_GIT}")

          JSON_BODY=$(jq -n \
            --arg tag "${{ env.TAG_NAME }}" \
            --arg name "${{ env.RELEASE_NAME }}" \
            --arg body "${BODY_TEXT}" \
            --argjson prerelease ${{ env.PRERELEASE }} \
            '{
              "tag_name": $tag,
              "name": $name,
              "body": $body,
              "prerelease": $prerelease
            }'
          )

          echo "Generated JSON Body for Versioned Release:"
          echo "${JSON_BODY}"

          curl -sL \
            -X POST \
            -H "Accept: application/json" \
            -H "Content-Type: application/json" \
            -H "Authorization: token ${{ secrets.RELEASE_PAT }}" \
            -d "${JSON_BODY}" \
            -o response.json \
            "${{ gitea.server_url }}/api/v1/repos/${{ gitea.repository }}/releases"

          UPLOAD_URL=$(jq -r .upload_url response.json)
          echo "UPLOAD_URL=${UPLOAD_URL}" >> $GITEA_ENV

      # ------------------------------------------------------------------
      # 步骤 9B: 如果不是版本号提交，则创建开发版 Release (保留原有行为)
      # 此步骤仅在 env.IS_VERSION_COMMIT == 'false' 时运行
      # ------------------------------------------------------------------
      - name: Create Dev Release (if not a version commit)
        id: create_dev_release # 更改ID以避免冲突
        if: env.IS_VERSION_COMMIT == 'false'
        run: |
          COMMIT_MSG_FROM_GIT=$(git log -1 --pretty=%B "${{ gitea.sha }}")
          BODY_TEXT=$(printf "Automated development build from commit %s:\n\n> %s" "${{ env.SHORT_SHA }}" "${COMMIT_MSG_FROM_GIT}")

          JSON_BODY=$(jq -n \
            --arg sha ${{ env.SHORT_SHA }} \
            --arg body "${BODY_TEXT}" \
            '{
              "tag_name": ("git-" + $sha),
              "name": ("Dev Build git-" + $sha),
              "body": $body,
              "prerelease": true
            }'
          )

          echo "Generated JSON Body for Dev Release:"
          echo "${JSON_BODY}"

          curl -sL \
            -X POST \
            -H "Accept: application/json" \
            -H "Content-Type: application/json" \
            -H "Authorization: token ${{ secrets.RELEASE_PAT }}" \
            -d "${JSON_BODY}" \
            -o response.json \
            "${{ gitea.server_url }}/api/v1/repos/${{ gitea.repository }}/releases"

          UPLOAD_URL=$(jq -r .upload_url response.json)
          echo "UPLOAD_URL=${UPLOAD_URL}" >> $GITEA_ENV

      # ------------------------------------------------------------------
      # 步骤 10: 上传附件到创建好的 Release
      # 1. 动态获取步骤 9A 或 9B 中生成的 UPLOAD_URL
      # 2. 上传所有产物
      # ------------------------------------------------------------------
      - name: Upload Release Assets via API
        run: |
          UPLOAD_URL="${{ env.UPLOAD_URL }}"
          
          if [ -z "$UPLOAD_URL" ] || [ "$UPLOAD_URL" == "null" ]; then
            echo "::error::Failed to get upload URL from a previous step."
            exit 1
          fi

          curl -sL \
            -X POST \
            -H "Content-Type: application/zip" \
            -H "Authorization: token ${{ secrets.RELEASE_PAT }}" \
            --data-binary "@liveplayer.zip" \
            "${UPLOAD_URL}?name=liveplayer.zip" > /dev/null

          for file in dist/*; do
            if [ -f "$file" ]; then
              FILENAME=$(basename "$file")
              echo "Uploading ${FILENAME}..."
              curl -sL \
                -X POST \
                -H "Content-Type: $(file -b --mime-type "$file")" \
                -H "Authorization: token ${{ secrets.RELEASE_PAT }}" \
                --data-binary "@$file" \
                "${UPLOAD_URL}?name=${FILENAME}" > /dev/null
            fi
          done