name: Event-Driven - Sync Single Release to GitHub

# Trigger: Listen for all relevant release events
on:
  release:
    types: [created, published, edited, deleted]

jobs:
  sync-single-release:
    runs-on: linux-amd64
    env:
      GH_TOKEN: ${{ secrets.G_GITHUB_TOKEN }}
      GITHUB_REPO: ${{ secrets.G_GITHUB_REPO }}

    steps:
      # ===================================================================
      #  Branch 1: Runs only when a Release is deleted
      # ===================================================================
      - name: Handle 'deleted' event
        if: gitea.event.action == 'deleted'
        env:
          TAG_NAME: ${{ gitea.event.release.tag_name }}
        run: |
          echo "Action: Deleting release '$TAG_NAME' on GitHub..."
          # The '|| true' ensures that even if the release does not exist on the GitHub side, the step will not fail and halt the workflow
          gh release delete "$TAG_NAME" --repo "$GITHUB_REPO" --yes --cleanup-tag || true
          echo "SUCCESS: Delete command for release '$TAG_NAME' sent to GitHub."

      # ===================================================================
      #  Branch 2: Runs only when a Release is created, published, or edited
      # ===================================================================
      - name: Handle 'created', 'published' or 'edited' event
        # [CORE FIX] Use the simple '||' operator supported by Gitea to connect all conditions.
        # This is the only validated and correct way to implement 'OR' logic in Gitea Actions.
        if: gitea.event.action == 'created' || gitea.event.action == 'published' || gitea.event.action == 'edited'
        env:
          GITEA_RELEASE_JSON: ${{ toJson(gitea.event.release) }}
          GITEA_TOKEN: ${{ secrets.GITEA_TOKEN }}
          GITEA_SERVER_URL: ${{ gitea.server_url }}
          GITEA_REPOSITORY: ${{ gitea.repository }}
        # This script block is a precise copy of the core logic from our previously successful "full sync" script
        run: |
          # [CORE FIX] No longer directly use the JSON from the Gitea event.
          # We will proactively fetch the latest Release data from the API to ensure the attachment list is up-to-date.
          set -e # Ensures the script exits immediately if any command fails

          # 1. Get the Release ID from the event context
          RELEASE_ID=${{ gitea.event.release.id }}
          echo "Action triggered for Release ID: $RELEASE_ID. Fetching its latest details from Gitea API..."

          # 2. Use the Release ID to fetch the complete, latest Release JSON from the Gitea API
          # This is the key step to ensure we get the full list of attachments
          GITEA_RELEASE_JSON=$(curl -L --fail -H "Authorization: token $GITEA_TOKEN" \
            "${GITEA_SERVER_URL}/api/v1/repos/${GITEA_REPOSITORY}/releases/${RELEASE_ID}")

          # Check if data was fetched successfully
          if [ -z "$GITEA_RELEASE_JSON" ]; then
            echo "::error::Failed to fetch release details for ID ${RELEASE_ID} from Gitea API."
            exit 1
          fi

          # 3. Extract all variables from the newly fetched JSON (same logic as before)
          TAG_NAME=$(echo "$GITEA_RELEASE_JSON" | jq -r .tag_name)
          RELEASE_NAME=$(echo "$GITEA_RELEASE_JSON" | jq -r .name)
          RELEASE_BODY=$(echo "$GITEA_RELEASE_JSON" | jq -r .body)
          IS_PRERELEASE=$(echo "$GITEA_RELEASE_JSON" | jq -r .prerelease)
          ASSETS_JSON=$(echo "$GITEA_RELEASE_JSON" | jq -c .assets)

          echo "Action: Creating or updating release '$TAG_NAME' on GitHub..."

          # 4. For idempotency, delete the old version first (retains original logic)
          # [IMPORTANT] Ensure --cleanup-tag is NOT used here, otherwise it will delete the Git tag on GitHub, causing subsequent creation to fail.
          echo "--> Step 4: Deleting old GitHub release object for idempotency..."
          gh release delete "$TAG_NAME" --repo "$GITHUB_REPO" --yes || true

          # 5. Download all assets (retains original logic)
          echo "--> Step 5: Downloading assets..."
          rm -rf ./temp_assets && mkdir -p ./temp_assets
          ASSET_PATHS=()

          if [ "$ASSETS_JSON" != "null" ] && [ "$(echo "$ASSETS_JSON" | jq 'length')" -gt 0 ]; then
            echo "Found $(echo "$ASSETS_JSON" | jq 'length') assets to download."
            while IFS= read -r asset_json; do
              ASSET_ID=$(echo "$asset_json" | jq -r .id)
              ASSET_NAME=$(echo "$asset_json" | jq -r .name)
              FILE_PATH="./temp_assets/$ASSET_NAME"
              # Note: The API URL for downloading attachments is different from the URL for fetching Release details
              ASSET_API_URL="${{ gitea.server_url }}/api/v1/repos/${{ gitea.repository }}/releases/${RELEASE_ID}/assets/${ASSET_ID}"
              echo "Downloading asset '$ASSET_NAME'..."
              curl -L --fail -H "Authorization: token $GITEA_TOKEN" -o "$FILE_PATH" "$ASSET_API_URL"
              ASSET_PATHS+=("$FILE_PATH")
            done < <(echo "$ASSETS_JSON" | jq -c '.[]')
          else
            echo "No assets found for this release."
          fi

          # 6. Create the new Release on GitHub (retains original logic)
          echo "--> Step 6: Creating GitHub release..."
          echo "$RELEASE_BODY" > "notes.txt"
          CREATE_ARGS=( "$TAG_NAME" --repo "$GITHUB_REPO" --title "$RELEASE_NAME" --notes-file "notes.txt" )
          if [ "$IS_PRERELEASE" = "true" ]; then CREATE_ARGS+=(--prerelease); fi
          if [ ${#ASSET_PATHS[@]} -gt 0 ]; then CREATE_ARGS+=("${ASSET_PATHS[@]}"); fi

          gh release create "${CREATE_ARGS[@]}"

          if [ $? -ne 0 ]; then
              echo "::error::'gh release create' failed for tag $TAG_NAME. Check if tag exists on GitHub and if permissions are correct."
              exit 1
          fi
          rm notes.txt

          echo "SUCCESS: Created/Updated release '$TAG_NAME' on GitHub with all its assets."