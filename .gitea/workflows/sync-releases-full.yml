# Workflow Name
name: Manual - Full Sync All Releases to GitHub

# Trigger: Manual trigger only
on:
  workflow_dispatch:

jobs:
  full-sync:
    runs-on: linux-amd64 # The tag for your self-hosted Runner
    steps:
      # Step 1: Fetch metadata for all Releases from the Gitea API
      # This workflow now only cares about Release metadata, not the Git repository itself.
      - name: 'Fetch All Releases MetaData from Gitea'
        run: |
          echo "Fetching list of all releases from Gitea (the source of truth)..."
          # To fetch all releases, pagination might be needed. This is simplified to fetch a maximum of 100.
          # You can add pagination logic if necessary.
          curl -L --fail -H "Authorization: token ${{ secrets.GITEA_TOKEN }}" \
            "${{ gitea.server_url }}/api/v1/repos/${{ gitea.repository }}/releases?limit=100" \
            -o releases.json
          if [ ! -s releases.json ]; then
            echo "::warning::Failed to fetch releases from Gitea or repository has no releases."
          fi
          echo "Found $(jq '. | length' releases.json) releases to process from Gitea."

      # Step 2: Wipe All Existing Release objects on GitHub (while KEEPING all tags)
      # Tags are managed by the 'Sync Code and Tags' workflow and must absolutely not be touched here.
      - name: 'Wipe All Existing Releases on GitHub (Keep Tags)'
        env:
          GH_TOKEN: ${{ secrets.G_GITHUB_TOKEN }}
        run: |
          echo "Fetching all existing releases from GitHub to delete them..."
          # Use the gh cli to get the tag names associated with all releases
          TAGS_TO_DELETE=$(gh release list --repo "${{ secrets.G_GITHUB_REPO }}" --limit 500 --json tagName -q '.[] | .tagName')

          if [ -z "$TAGS_TO_DELETE" ]; then
            echo "No existing releases found on GitHub. Nothing to delete."
          else
            echo "The following GitHub releases will be DELETED (tags will be KEPT):"
            echo "$TAGS_TO_DELETE"
            echo "$TAGS_TO_DELETE" | while IFS= read -r tag; do
              echo "--> Deleting GitHub release object for tag: $tag"
              # [CRITICAL] Only delete the release object here, never use --cleanup-tag
              gh release delete "$tag" --repo "${{ secrets.G_GITHUB_REPO }}" --yes 2>/dev/null || true
            done
            echo "All pre-existing release objects on GitHub have been wiped."
          fi

      # Step 3: Recreate all Releases on GitHub in chronological order (from oldest to newest)
      # This perfectly preserves the original order and dates from Gitea.
      - name: 'Recreate All Releases on GitHub in Chronological Order'
        env:
          GH_TOKEN: ${{ secrets.G_GITHUB_TOKEN }}
        run: |
          if [ ! -s releases.json ]; then
            echo "Gitea has no releases. GitHub is now clean. Job finished."
            exit 0
          fi
        
          # [CRITICAL] Use jq's 'reverse' command to invert the array, processing from oldest to newest.
          # The created Releases will then be sorted by the correct date.
          while IFS= read -r release_json; do
            # Variable extraction logic remains the same
            RELEASE_ID=$(echo "$release_json" | jq -r .id)
            TAG_NAME=$(echo "$release_json" | jq -r .tag_name)
            RELEASE_NAME=$(echo "$release_json" | jq -r .name)
            RELEASE_BODY=$(echo "$release_json" | jq -r .body)
            IS_PRERELEASE=$(echo "$release_json" | jq -r .prerelease)
            ASSETS_JSON=$(echo "$release_json" | jq -c .assets)

            echo "====================================================="
            echo "Recreating Release: $RELEASE_NAME (Tag: $TAG_NAME)"

            # Asset download logic remains the same
            rm -rf ./temp_assets && mkdir -p ./temp_assets
            ASSET_PATHS=()
            if [ "$ASSETS_JSON" != "null" ] && [ "$(echo "$ASSETS_JSON" | jq 'length')" -gt 0 ]; then
              while IFS= read -r asset_json; do
                ASSET_ID=$(echo "$asset_json" | jq -r .id)
                ASSET_NAME=$(echo "$asset_json" | jq -r .name)
                FILE_PATH="./temp_assets/$ASSET_NAME"
                ASSET_API_URL="${{ gitea.server_url }}/api/v1/repos/${{ gitea.repository }}/releases/${RELEASE_ID}/assets/${ASSET_ID}"
                curl -L --fail -H "Authorization: token ${{ secrets.GITEA_TOKEN }}" -o "$FILE_PATH" "$ASSET_API_URL"
                ASSET_PATHS+=("$FILE_PATH")
              done < <(echo "$ASSETS_JSON" | jq -c '.[]')
            fi

            # Release creation logic remains the same
            echo "$RELEASE_BODY" > "notes_${TAG_NAME}.txt"
            CREATE_ARGS=( "$TAG_NAME" --repo "${{ secrets.G_GITHUB_REPO }}" --title "$RELEASE_NAME" --notes-file "notes_${TAG_NAME}.txt" )
            if [ "$IS_PRERELEASE" = "true" ]; then CREATE_ARGS+=(--prerelease); fi
            if [ ${#ASSET_PATHS[@]} -gt 0 ]; then CREATE_ARGS+=("${ASSET_PATHS[@]}"); fi
            
            # 'gh release create' will automatically find the existing tag with the same name on GitHub and attach the release to it.
            gh release create "${CREATE_ARGS[@]}"
            
            if [ $? -ne 0 ]; then
                echo "::error::'gh release create' failed for tag $TAG_NAME."
                exit 1
            fi
            rm "notes_${TAG_NAME}.txt"
            echo "SUCCESS: Recreated release $RELEASE_NAME on GitHub."

          done < <(jq -c '. | reverse | .[]' releases.json)